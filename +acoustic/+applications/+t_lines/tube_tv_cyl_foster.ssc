component (Propagation = blocks) tube_tv_cyl_foster  
% Cylindrical Tube With Thermoviscous Losses Using Foster Network
% This component implements a segmented cylindrical tube as described
% in "Analog model for thermoviscous propagation in a cylindrical
% tube," by Stephen C. Thompson, Thomas B. Gabrielson and Daniel 
% M. Warren, http://dx.doi.org/10.1121/1.4861237.
%
% This component has the option to choose a simple model for the tube. 
% When the "Simple Model" option is selected, the "Simple Tube Model" component is called, modeling the tube as a single transmission line impedance.
% The differential branches and order will be neglected and the total length of the tube will not be segmented.
% Simple model is suitable for tubes with small dimensions compared to the wavelength.
%
% This component replaces the Cylindrical Tube With Thermoviscous Losses

%   Copyright 2025 The MathWorks, Inc.


    parameters
      a                 =  {0.0075, 'm'};                   % Tube Radius (a)
      length            = {0.35, 'm'};                      % Tube Length (length) 
      mdl               = acoustic.enum.Tubemdl(2);         % Select Tube Model (mdl)
      order             = 4;                                % Order of Thermoviscous Approximation (order)
      Ndl               = 20;                               % Number of Differential Tube Lengths (Ndl)
    end

    nodes
        p1 = acoustic.acoustic; % P1
        p2 = acoustic.acoustic; % P2
        p3 = acoustic.acoustic; % P3
    end

    annotations
        [p1]: Side = left;
        [p2]: Side = right;
        [p3]: Side = bottom;
    end

    if mdl == acoustic.enum.Tubemdl(2)         % differential branches

        parameters (Access = private)
            ele_dl = length/Ndl; 
            R0 = pi*p1.rho*p1.nu*ele_dl/(pi*a^2)^2;
            L0 = p1.rho * ele_dl/(pi*a^2);
            C0 = pi*a^2*ele_dl/p1.rho/p1.c^2;
            G0 = pi*ele_dl*p1.kappa*(p1.gamma-1)/p1.rho^2/p1.c^2/p1.Cp
        end
    
        equations
            assert(1<=order && order<=16,'from tube_tv_cyl_foster: must have 1>= order >=16');
        end

        for ii=1:2
            components (ExternalAccess = none)
                dl_Zend(ii) = acoustic.applications.t_lines.Zdl_tv_cyl_foster(N=order, L0 = L0/2, R0 = R0/2);
            end
        end

        for ii=1:Ndl-1
            components(ExternalAccess = none)
                dl_Z(ii) = acoustic.applications.t_lines.Zdl_tv_cyl_foster(N=order, L0 = L0, R0 = R0);
            end
        end

        for ii=1:Ndl
            components (ExternalAccess = none)
                dl_Y(ii) = acoustic.applications.t_lines.Ydl_tv_cyl_foster(N=order, C0 = C0, G0 = G0);
            end
        end

        connections
            connect(p1, dl_Zend(1).p1);
            connect(dl_Zend(1).p2, dl_Z(1).p1, dl_Y(1).p1);
            connect(dl_Y(1).p2, p3);

            connect(p2, dl_Zend(2).p2);
            connect(dl_Zend(2).p1, dl_Z(Ndl-1).p2, dl_Y(Ndl).p1);
            connect(dl_Y(Ndl).p2, p3);
        end

        for ii=2:Ndl-1
            connections
                connect(dl_Z(ii-1).p2, dl_Z(ii).p1, dl_Y(ii).p1);
                connect(dl_Y(ii).p2, p3);
            end
        end

    else                % simple model

        annotations
            [order, Ndl] : ExternalAccess = none;
        end

        components
            tube = acoustic.applications.t_lines.Simple_Tube_Model(a = a, l = length);
        end

        connections
            connect(tube.p1, p1);
            connect(tube.p2, p2);
            connect(tube.p3, p3);
        end
    end 
end
