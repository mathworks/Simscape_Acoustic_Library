component tube_tv_cyl  
% Cylindrical Tube With Thermoviscous Losses
%
% This component implements a segmented cylindrical tube as described
% in "Analog model for thermoviscous propagation in a cylindrical
% tube," by Stephen C. Thompson, Thomas B. Gabrielson and Daniel 
% M. Warren, http://dx.doi.org/10.1121/1.4861237.
%
% This component has the option to choice a simple model for the tube. 
% When the "Simple Model" option was selected, the "Simple Tube Model" component is called and model the tube as a single transmission line impedance.
% The LR and CR branches will be neglected and the total length of the tube will not be segmented.
% Simple model is suitable for tubes with small dimensions compared to the wavelength.

%   Copyright 2025 The MathWorks, Inc.

    parameters
        a           = {0.0075,  'm'};                    % Tube Radius (a)
        length      = {0.35,    'm'};                    % Tube Length (length)
        mdl         = acoustic.enum.Tubemdl(2);        % Select Tube Model (mdl)
        Ndl         = 40;                   % Number of Differential Tube Lengths (Ndl)
        LR_branches = 32;                   % Number of LR Branches (LR_branches)
        CR_branches = 24;                   % Number of CR Branches (CR_branches)
    end

    nodes
        p1 = acoustic.acoustic;     % +
        p2 = acoustic.acoustic;     % -
        p3 = acoustic.acoustic;     % comm
    end

    annotations
        p1: Side = left;
        p2: Side = right;
        p3: Side = bottom;
    end

    if mdl == acoustic.enum.Tubemdl(2)         % differential branches

        parameters (Access = private)
            ele_dl = length/Ndl; 
            C0 = pi*a^2*ele_dl/p1.rho/p1.c^2;
            R1 = p1.rho^2*p1.c^2*p1.Cp/(8*pi*p1.kappa*(p1.gamma-1)*ele_dl);
            L0 = p1.rho * ele_dl/(pi*a^2);
            R0 = 8*pi*p1.rho*p1.nu*ele_dl/(pi*a^2)^2;
        end

        for ii=1:2
            components (ExternalAccess = none)
                dl_Zend(ii) = acoustic.applications.t_lines.thermovisc_Zdl(LR_branches = LR_branches, L0 = L0/2, R0 = R0/2);
            end
        end
        for ii=1:Ndl-1
            components(ExternalAccess = none)
                dl_Z(ii) = acoustic.applications.t_lines.thermovisc_Zdl(LR_branches = LR_branches, L0 = L0, R0 = R0);
            end
        end
        for ii=1:Ndl
            components (ExternalAccess = none)
                dl_Y(ii) = acoustic.applications.t_lines.thermovisc_Ydl(CR_branches = CR_branches, C0 = C0, R0 = R1);
            end
        end
        connections
            connect(p1, dl_Zend(1).p1);
            connect(p2, dl_Zend(2).p2);
            connect(dl_Z(Ndl-1).p2, dl_Zend(2).p1, dl_Y(Ndl).p1);
            connect(dl_Y(Ndl).p2, p3);    
            connect(dl_Zend(1).p2, dl_Z(1).p1, dl_Y(1).p1);
            connect(dl_Y(1).p2, p3);
        end
        for ii=2:Ndl-1
            connections
                connect(dl_Z(ii-1).p2, dl_Z(ii).p1, dl_Y(ii).p1);
                connect(dl_Y(ii).p2, p3);
            end
        end

    else                % simple model

        annotations
            [Ndl, LR_branches, CR_branches] : ExternalAccess = none;
        end

        components
            tube = acoustic.applications.t_lines.Simple_Tube_Model(a = a, l = length);
        end

        connections
            connect(tube.p1, p1);
            connect(tube.p2, p2);
            connect(tube.p3, p3);
        end
    end 
end
