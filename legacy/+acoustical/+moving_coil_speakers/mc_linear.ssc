component mc_linear
% Linear Moving Coil Speaker
%   Simple model for a moving coil speaker including
%     Electrical resistance and inductance
%     Electromechanical (BL) converter
%     Mechanical mass, stiffness and damping
%     Mechanoacoustic conversion (area transformer) to acoustic domain
%     Optional
%       Electrical R2 and L2 to partially model eddy current effects

% Copyright 2022-4 Stephen C. Thompson
% Distributed under the 3-Clause BSD License
% See LicenseInfo.pdf file in this distribution

parameters
    Re = {7.8, 'Ohm'}; %Resistance Re
    l = {1.24, 'mH'}; %Inductance Le
    R2L2 = acoustic.enum.R2L2.simple; % Include R2 and L2?
    R2 = {3.52, 'Ohm'}; % Resistance R2
    L2 = {0.84, 'mH'}; % Inductance L2
    mass = {4.8, 'g'}; %Mass
    Sd = {30.4, 'cm^2'}; %Cone area
    Rm = {0.1, 'N*s/m'}; %Mechanical Resistance
    BL = {5.34, 'N/A'}; %Force Constant BL
    K = {1000, 'N/m'}; %Spring stiffness
    MechPort = acoustic.enum.WithMechanicalPort.noPort; % Include Mechanical force port?
  end
  outputs
    Disp = {0, 'm'}; % Disp
  end
  if R2L2 == acoustic.enum.R2L2.simple
      annotations
          [R2,L2] : ExternalAccess=none;
      end
  end
  nodes
    a0 = acoustic.acoustic; %cone_front:right
    a1 = acoustic.acoustic; %cone_back:right
    e0 = foundation.electrical.electrical; %e+:left
    e1 = foundation.electrical.electrical; %e-:left
    M  = foundation.mechanical.translational.translational; % Mech
  end
  annotations
      [a0]     : Side = right;
      [a1]     : Side = bottom;
      [e0, e1] : Side = left;
      [Disp]   : Side = top;
      [M]      : Side = bottom;
  end

  equations
      assert(0, "This block is deprecated. Use 'Moving Coil Speaker' from acoustic library instead.", Action = simscape.enum.assert.action.warn)
  end

  if MechPort == acoustic.enum.WithMechanicalPort.noPort
      annotations
          [M] : ExternalAccess=none;
      end
  end
  components(ExternalAccess = observe)
    Translational_Spring = foundation.mechanical.translational.spring(spr_rate = K);
    Translational_Electromechanical_Converter = foundation.electrical.elements.translational_converter(K = BL);
    Translational_Damper = foundation.mechanical.translational.damper(D = Rm);
    Resistor = foundation.electrical.elements.resistor(R = Re);
    Mechanical_to_acoustic_Converter_area_transformer = acoustical.elements.mechanical_converter(Sd = Sd);
    Mechanical_Translational_Reference = foundation.mechanical.translational.reference;
    Mass = foundation.mechanical.translational.mass(mass = mass);
    Inductor = foundation.electrical.elements.inductor(g = {1e-09, '1/Ohm'}, r = {0, 'Ohm'}, l = l);
    Ideal_Translational_Motion_Sensor = foundation.mechanical.sensors.velocity(offset = {0, 'm'});
    PS_Terminator = foundation.signal.sinks.terminator;
  end
  if R2L2 == acoustic.enum.R2L2.withR2L2
      components
          Resistor1 = foundation.electrical.elements.resistor(R = R2);
          Inductor1 = foundation.electrical.elements.inductor(r = {0, 'Ohm'}, g = {1e-09, '1/Ohm'}, l = L2);
      end
  end
  connections
    connect(Ideal_Translational_Motion_Sensor.V,PS_Terminator.I);
    connect(Ideal_Translational_Motion_Sensor.P,Disp);
    connect(e1,Translational_Electromechanical_Converter.n);
    connect(e0,Resistor.p);
    connect(a1,Mechanical_to_acoustic_Converter_area_transformer.nn);
    connect(Mass.M,Mechanical_to_acoustic_Converter_area_transformer.R);
    connect(Mass.M,Translational_Damper.R);
    connect(Mass.M,Translational_Electromechanical_Converter.R);
    connect(Mass.M,Translational_Spring.R);
    connect(Ideal_Translational_Motion_Sensor.R,Mass.M);
    connect(a0,Mechanical_to_acoustic_Converter_area_transformer.pp);
    connect(Inductor.p,Resistor.n);
    connect(M,Mechanical_to_acoustic_Converter_area_transformer.C);
    connect(M,Translational_Damper.C);
    connect(M,Translational_Electromechanical_Converter.C);
    connect(M,Translational_Spring.C);
    connect(M,Ideal_Translational_Motion_Sensor.C);
  end
  if R2L2 == acoustic.enum.R2L2.simple
      connections
        connect(Inductor.n,Translational_Electromechanical_Converter.p);
      end
  else
      connections
        connect(Inductor.n, Resistor1.p, Inductor1.p);
        connect(Resistor1.n,Inductor1.n,Translational_Electromechanical_Converter.p);
      end
   end
   if MechPort == acoustic.enum.WithMechanicalPort.noPort;
      connections
          connect(M,*);
      end
  end 
end
